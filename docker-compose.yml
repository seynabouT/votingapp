services:
  vote:
    build: ./vote
    container_name: vote_service
    command: python app.py
    ports:
      - "5000:80"
    networks:
      - frontend
      - backend
    environment:
      - REDIS_HOST=redis
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 10s
      timeout: 5s
      retries: 5

  result:
    build: ./result
    container_name: result_service
    command: node server.js
    ports:
      - "5001:80"
    networks:
      - frontend
      - backend
    environment:
      - DB_HOST=db
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 10s
      timeout: 5s
      retries: 5

  worker:
    build: ./worker
    container_name: worker_service
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    networks:
      - backend
    environment:
      - REDIS_HOST=redis
      - DB_HOST=db
    env_file:
      - .env

  redis:
    image: redis:8-alpine
    container_name: redis_service
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  db:
    image: postgres:17-alpine
    container_name: votes_db
    ports:
      - "5432:5432"
    volumes:
      - db-vote:/var/lib/postgresql/data
    networks:
      - backend
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  nginx:
    build: ./nginx
    container_name: nginx
    ports:
      - "4443:443"
    depends_on:
      vote:
        condition: service_healthy
      result:
        condition: service_healthy
    networks:
      - frontend
      - backend

volumes:
  db-vote:

networks:
  frontend:
  backend:

